#!/bin/sh -efu

. shell-error
. shell-var
. shell-quote
. shell-cmdline
. shell-git-config

vm_profile="${vm_profile-}"
_get_param_one() {
	local retv name default value= common_value= profile_value=
	local conf_name conf_value

	retv="$1";    shift
	name="$1";    shift
	default="$1"; shift

	while IFS='	' read conf_name conf_value; do
		[ "$conf_name" != "vm.$vm_profile.$name" ] ||
			profile_value="$conf_value"
		[ "$conf_name" != "vm.$name" ] ||
			common_value="$conf_value"
	done < clist

	value="$profile_value"
	value="${value:-$common_value}"
	value="${value:-$default}"

	eval "export $retv=\"$value\""
}

_get_param_list() {
	local retv name i=0
	local conf_name conf_value

	retv="$1"; shift
	name="$1"; shift

	while IFS='	' read conf_name conf_value; do
		[ "$conf_name" = "vm.$vm_profile.$name" ] ||
			continue
		eval "export ${retv}_$i=\"\$conf_value\""
		i=$(($i+1))
	done < clist

	eval "export $retv=\"\$i\""
}

_parse_config() {
	local n t f c d

	git_config_parse "$1" > clist

	for n in $vm_params; do
		eval "[ -z \"\${$n-}\" ] || continue"
		eval "t=\"\$${n}_type\""
		eval "c=\"\${${n}_cfgname-}\""
		eval "d=\"\${${n}_default-}\""

		[ -n "$c" ] ||
			continue

		[ "$t" = 'one' -o "$t" = 'list' ] ||
			fatal "Unknown value: $t"

		"_get_param_$t" "$n" "$c" "$d"
	done
}

qemu_cmdline=
qemu_cmdline_names=' '
_append_cmdline() {
	local n="$1" v="${2-}"
	[ -n "${qemu_cmdline_names##*$n*}" ] ||
		return 0
	qemu_cmdline_names="$qemu_cmdline_names$n "
	qemu_cmdline="${qemu_cmdline:+$qemu_cmdline }$n${v:+=$v}"
}

qemu_exec=
_process_qemu_arch() {
	qemu_exec="qemu-system-$qemu_arch"
	"$qemu_exec" -version >/dev/null 2>&1 ||
		fatal "Unsupported arch: $qemu_arch"
}

_process_qemu_machine() {
	[ -n "$qemu_machine" ] ||
		return 0
	qemu_args="$qemu_args -machine $qemu_machine"
}

_process_qemu_cpu() {
	[ -n "$qemu_cpu" ] ||
		return 0
	qemu_args="$qemu_args -cpu $qemu_cpu"
}

_process_qemu_cpus()    {
	[ -n "$qemu_cpus" ] ||
		return 0
	[ -n "${qemu_cpus##*[!0-9]*}" ] ||
		fatal "Wrong value: $qemu_cpus"
	qemu_args="$qemu_args -smp $qemu_cpus"
}

_process_qemu_memory()  {
	[ -n "$qemu_memory" ] ||
		return 0
	qemu_args="$qemu_args -m $qemu_memory"
}

_process_qemu_console() {
	[ -n "$qemu_console" ] ||
		return 0

	qemu_args="$qemu_args -chardev stdio,mux=on,id=stdio,signal=off"
	qemu_args="$qemu_args -mon chardev=stdio,mode=readline,default"

	case "$qemu_console" in
		serial)
			_append_cmdline console ttyS0
			qemu_args="$qemu_args -device isa-serial,chardev=stdio"
			;;
		virtio)
			_append_cmdline console hvc0
			qemu_args="$qemu_args -device virtio-serial"
			qemu_args="$qemu_args -device virtconsole,chardev=stdio"
			;;
		*)
			#fatal "BUG: Unknown console type."
			;;
	esac
}

_process_qemu_logfile() {
	return 0
}

_process_qemu_monitor() {
	[ -n "$qemu_monitor" ] ||
		return 0

	case "${qemu_monitor%%:*}" in
		none)
			qemu_args="$qemu_args -monitor none"
			;;
		qmp)
			qemu_args="$qemu_args -qmp ${qemu_monitor#qmp:}"
			;;
		monitor)
			qemu_args="$qemu_args -monitor ${qemu_monitor#monitor:}"
			;;
	esac
}

_process_qemu_network() {
	[ -n "$qemu_network" ] ||
		return 0

	local nettype= netopts=

	case "$qemu_network" in
		none)
			nettype="none"
			;;
		user|user,*)
			nettype="user"
			netopts="${qemu_network#user}"
			;;
		dump|dump,*)
			nettype="dump"
			netopts="${qemu_network#dump}"
			;;
		*)
			fatal "Unknown network type"
			;;
	esac

	qemu_args="$qemu_args -net $nettype${netopts:+$netopts}"
}

_process_qemu_kernel() {
	[ -n "$qemu_kernel" ] ||
		return 0
	qemu_args="$qemu_args -kernel $qemu_kernel"
}

_process_qemu_initrd() {
	[ -n "$qemu_initrd" ] ||
		return 0
	[ -n "$qemu_kernel" ] ||
		fatal "kernel required"
	qemu_args="$qemu_args -initrd $qemu_initrd"
}

_process_qemu_append() {
	[ -n "$qemu_append" ] ||
		return 0
	[ -n "$qemu_kernel" ] ||
		fatal "kernel required"
	cmdline_foreach "$qemu_append" _append_cmdline
}

_process_qemu_addappend() {
	[ -n "$qemu_addappend" ] ||
		return 0
	[ -n "$qemu_kernel" ] ||
		fatal "kernel required"
	cmdline_foreach "$qemu_addappend" _append_cmdline
}

_process_qemu_balloon() {
	[ -n "$qemu_balloon" ] ||
		return 0
	! shell_var_is_yes "$qemu_balloon" ||
		qemu_args="$qemu_args -balloon virtio"
}

_process_qemu_kvm() {
	[ -n "$qemu_kvm" ] ||
		return 0
	! shell_var_is_yes "$qemu_kvm" ||
		qemu_args="$qemu_args -enable-kvm"
}

_process_qemu_reboot() {
	[ -n "$qemu_reboot" ] ||
		return 0
	! shell_var_is_no "$qemu_reboot" ||
		qemu_args="$qemu_args -no-reboot"
}

_process_qemu_graphic() {
	[ -n "$qemu_graphic" ] ||
		return 0
	! shell_var_is_no "$qemu_graphic" ||
		qemu_args="$qemu_args -nographic"
}

_process_qemu_tempdir() {
	[ -n "$qemu_tempdir" ] ||
		return 0
	export TMPDIR="$qemu_tempdir"
}

_process_qemu_disk() {
	[ -n "$qemu_disk" ] ||
		return 0
	local v i=0
	while [ $i -lt $qemu_disk ]; do
		eval "v=\"\$qemu_disk_$i\""
		[ -n "${v##*[!,],[!,]*}" ] &&
			qemu_args="$qemu_args -drive file=$v,if=virtio,cache=writeback" ||
			qemu_args="$qemu_args -drive $v"
		i=$(($i + 1))
	done
}

_process_qemu_virtfs() {
	[ -n "$qemu_virtfs" ] ||
		return 0
	local q_p q_t q_v v i=0
	while [ $i -lt $qemu_virtfs ]; do
		eval "v=\"\$qemu_virtfs_$i\""

		if [ -n "${v##*[!,],[!,]*}" ]; then
			quote_shell_variable q_p "${v%%:*}"
			quote_shell_variable q_t "${v#*:}"

			# Broken: http://patchwork.ozlabs.org/patch/127551/
			# qemu_args="$qemu_args -virtfs local,id=virtfs-$i,path=$q_p,security_model=none,mount_tag=$q_t"

			qemu_args="$qemu_args -fsdev local,id=virtfs-$i,path=$q_p,security_model=none"
			qemu_args="$qemu_args -device virtio-9p-pci,fsdev=virtfs-$i,mount_tag=$q_t"
		else
			quote_shell_variable q_v "$v"
			qemu_args="$qemu_args -virtfs $v"
		fi

		i=$(($i + 1))
	done
}

qemu_args=
vm_read_config() {
	local vm_config_file="$1"

	_parse_config "$vm_config_file"

	local name
	for name in $vm_params; do
		"_process_$name"
	done

	export qemu_exec qemu_args qemu_cmdline
}
