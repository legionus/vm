#!/bin/sh -efu

if [ -n "${VM_USAGE-}" ]; then
	printf 'setup [options] <profile>\n'
	printf 'setup --list [<profile> ...]\n'
	printf 'setup --delete [<profile> ...]\n'
	exit 0
fi

if [ -n "${VM_HELP-}" ]; then
	printf 'Setup a new sandbox\n'
	exit 0
fi

if [ -n "${VM_HELP_OPTIONS-}" ]; then
	cat <<-EOF
	  -d, --delete                removes profile;
	  -l, --list                  shows information about profiles;
	  -L, --long-list             shows detailed information about profiles;
	  -g, --global=DIR            creates global rootfs;
	  -r, --kconfig-requires      shows kernel options required for the specified profile;
	  -m, --kconfig-merge         merges required kernel config fragments into .config;
	  --no-check-kernel-config    do not check kernel .config;
	  --usage                     shows the help message of subcommand.
	EOF
	exit 0
fi

. shell-error
. shell-git-config

GETOPT_ALLOW_UNKNOWN=
TEMP=`getopt -n $PROG -o 'g:,d,l,L,m,r' -l 'global:,no-check-kernel-config,list,long-list,kconfig-merge,kconfig-requires,delete,usage' -- "$@"` ||
	show_usage
eval set -- "$TEMP"

global=
show_kconfig_requires=
merge_kconfig_requires=
list_profiles=
long_list_profiles=
delete_profile=

while :; do
	case "$1" in
		-g|--global) shift
			global="$1"
			;;
		-d|--delete)
			delete_profile=1
			;;
		-l|--list)
			list_profiles=1
			;;
		-L|--long-list)
			long_list_profiles=1
			;;
		-m|--kconfig-merge)
			merge_kconfig_requires=1
			;;
		-r|--kconfig-requires)
			show_kconfig_requires=1
			;;
		--no-check-kernel-config)
			no_check_kernel_config=1
			;;
		--usage)
			show_command_help
			;;
		--) shift; break
			;;
	esac
	shift
done

if [ -n "$list_profiles" ]; then
	if [ "$#" -gt 0 ]; then
		git_config_list "$vm_config_file" |
			sort |
		while read -r s; do
			n="${s%%=*}"
			n="${n#vm.}"
			n="${n%.*}"

			found=
			for profile; do
				[ "$n" != "$profile" ] ||
					found=1
			done

			[ -n "$found" ] ||
				continue

			if [ -z "${vm-}" ] || [ "$vm" != "$n" ]; then
				printf '[vm "%s"]\n' "$n"
				vm="$n"
			fi

			v="${s#vm.$n.}"

			[ -z "${v##\#*}" ] ||
				printf '  %10s = %s\n' "${v%%=*}" "${v#*=}"
		done
	else
		git_config_list "$vm_config_file" |
			sed -n -r \
				-e 's/^([^=]+)=.*$/\1/' \
				-e 's/^vm\.(.+)\..+$/\1/p' |
			sort -u
	fi
	exit
elif [ -n "$long_list_profiles" ]; then
	. "@PREFIX@/vm-sh-config"

	vm_profiles=
	git_config_get vm_profiles "$vm_config_file" "vm.profiles"

	profiles="$(
		git_config_list "$vm_config_file" |
			sed -n -r \
				-e 's/^([^=]+)=.*$/\1/' \
				-e 's/^vm\.(.+)\..+$/\1/p' |
			sort -u
	)"

	setmax() {
		local sz lenvar="$1" value="$2"
		eval "sz=\"\${$lenvar:-0}\""
		[ "$sz" -ge "${#value}" ] ||
			sz=${#value}
		eval "$lenvar=\"\$sz\""
	}

	rows=0
	cols=0
	setinfo()
	{
		cols="$#"
		local i=0
		while [ $i -lt $cols ]; do
			eval "info_${i}_$rows=\"\$$(($i+1))\""
			i=$(($i+1))
		done
		rows=$(($rows+1))
	}

	setinfo "NAME" "PID" "STATUS" "ELAPSED" "RSS" "FSSIZE" "ROOTFS"

	for vm_profile in $profiles; do
		if [ "$#" -gt 0 ]; then
			found=
			for profile; do
				[ "$vm_profile" != "$profile" ] ||
					found=1
			done

			[ -n "$found" ] ||
				continue
		fi

		pid='-'
		[ ! -e "$vm_profiles/$vm_profile/pid" ] ||
			read -r pid < "$vm_profiles/$vm_profile/pid"

		elapsed='-'
		rss=0
		status=stopped

		if [ "$pid" != '-' ]; then
			status=dead

			! kill -0 "$pid" >/dev/null 2>&1 ||
				status=running

			if [ "$status" = running ]; then
				elapsed=$(ps h -o etime "$pid")
				elapsed="${elapsed##* }"

				rss=$(ps h -o rss "$pid")
				rss_suffix=K
				for s in M G T; do
					if [ $rss -gt 10240 ]; then
						rss="$(($rss / 1024))"
						rss_suffix="$s"
					fi
				done
				rss="$rss$rss_suffix"
			fi
		fi

		fssize='missed'
		rootfs=

		git_config_get rootfs "$vm_config_file" "vm.$vm_profile.rootfs"

		if [ -n "$rootfs" ]; then
			subst_globals rootfs "$rootfs"

			if [ -d "$rootfs" ]; then
				fssize="$(du -sbh "$rootfs")"
				fssize="${fssize%%[ 	]*}"
			fi

			[ -n "${rootfs##$HOME/*}" ] ||
				rootfs="~/${rootfs#$HOME/}"
		else
			rootfs='-'
		fi

		setinfo "$vm_profile" "$pid" "$status" "$elapsed" "$rss" "$fssize" "$rootfs"
	done

	row=0
	while [ $row -lt $rows ]; do
		col=0
		while [ $col -lt $cols ]; do
			eval "setmax info_${col}_len \"\$info_${col}_${row}\""
			col=$(($col+1))
		done
		row=$(($row+1))
	done

	row=0
	while [ $row -lt $rows ]; do
		col=0
		while [ $col -lt $cols ]; do
			eval "n=\"\$info_${col}_len\""
			eval "v=\"\$info_${col}_${row}\""
			[ "$col" = 0 ] ||
				printf '\t'
			printf '%-'$n's' "$v"
			col=$(($col+1))
		done
		printf '\n'
		row=$(($row+1))
	done

	exit
elif [ -n "$delete_profile" ]; then
	vm_profiles=
	git_config_get vm_profiles "$vm_config_file" "vm.profiles"

	for profile; do
		[ ! -d "$vm_profiles/$profile" ] ||
			$vm_dryrun rm -rf -- "$vm_profiles/$profile"
	done

	git_config_list "$vm_config_file" |
		sort |
	while read -r s; do
		n="${s%%=*}"
		n="${n#vm.}"
		n="${n%.*}"

		found=
		for profile; do
			[ "$n" != "$profile" ] ||
				found=1
		done

		[ -n "$found" ] ||
			continue

		$vm_dryrun git_config_unset "$vm_config_file" "${s%%=*}"
	done

	for profile; do
		$vm_dryrun git_config_unset "$vm_config_file" "vm.$profile"
	done

	exit
fi

[ "$#" -gt 0 ] ||
	show_usage "Profile name required"

vm_profile="$1"
shift

export vm_profile

if [ -z "$global" ]; then
	. "@PREFIX@/vm-sh-config"

	vm_read_common_config

	vm_profiles=
	git_config_get vm_profiles "$vm_config_file" "vm.profiles"

	dest_dir="$vm_profiles/$vm_profile/rootfs"
	config_dest_dir="$vm_profiles/@vm.name@/rootfs"
else
	verbose "Setup global rootfs."
	dest_dir="$global"
	config_dest_dir="$dest_dir"
fi

if [ -n "$show_kconfig_requires" ]; then
	cd '@PREFIX@'
	grep -h -v -e '^[[:space:]]*\(#.*\)\?$' $kernel_config_expect |
		sort -u
	exit
fi

if [ -n "$merge_kconfig_requires" ]; then
	if [ -z "$kernel_dir" ]; then
		n="${qemu_kernel-}"
		while [ -e "$n" ]; do
			if [ -s "${n%/*}/.config" ]; then
				kernel_dir="${n%/*}"
				break
			fi
			[ -z "${n##*/*}" ] ||
				break
			n="${n%/*}"
		done
	fi

	[ -d "$kernel_dir" ] ||
		fatal "kernel config merge doesn't make sense without kernel sources."

	[ -s "$kernel_dir/.config" ] ||
		fatal "$kernel_dir/.config: kernel config not found."

	merge_config="$kernel_dir/scripts/kconfig/merge_config.sh"
	[ -x "$merge_config" ] ||
		fatal "$merge_config: not found or not executable. Can't merge."

	have_builtin=
	! "$merge_config" -h | grep -qs -e '^[[:space:]]\+-y[[:space:]]' ||
		have_builtin=1

	cd '@PREFIX@'
	"$merge_config" -m ${have_builtin:+-y} -O "$kernel_dir" "$kernel_dir/.config" $kernel_config_expect
	exit
fi

vm_check_kernel_config

git_config_location_exists "$vm_config_file" "vm.$vm_profile" ||
	verbose "Profile does not exist. Creating ..."

git_config_set "$vm_config_file" "vm.$vm_profile.rootfs" "$config_dest_dir"
[ -z "${qemu_kernel-}" ] ||
	git_config_set "$vm_config_file" "vm.$vm_profile.kernel" "$qemu_kernel"
git_config_set "$vm_config_file" "vm.$vm_profile.append" "init=virt/init root=/dev/root rootflags=rw,trans=virtio,version=9p2000.L,setuid=0 rootfstype=9p rw"

git_config_unset  "$vm_config_file" "vm.$vm_profile.virtfs"
git_config_append "$vm_config_file" "vm.$vm_profile.virtfs" "@vm.rootfs@:/dev/root"
git_config_append "$vm_config_file" "vm.$vm_profile.virtfs" "/:hostfs"

[ -d "$dest_dir" ] &&
	message "Updating rootfs: $dest_dir" ||
	message "Creating rootfs: $dest_dir"

mkdir ${verbose-} -p -- "$dest_dir"
cd "$dest_dir"

for n in dev etc home host proc root sys tmp var var/lib virt virt/home virt/etc; do
	mkdir ${verbose-} -p -- "./$n"
done

for n in bin lib lib64 sbin usr etc/alternatives etc/ld.so.conf; do
	[ -e "./$n" ] || [ -L "./$n" ] || [ ! -e "/host/$n" ] ||
		ln ${verbose-} -s -- "/host/$n" "./$n"
done

[ -f ./etc/passwd ] ||
	printf 'root:x:0:0:root:/root:/bin/sh\n' > ./etc/passwd
[ -f ./etc/group ] ||
	printf 'root:x:0:\n' > ./etc/group

cat >./virt/etc/environ<<EOF
PATH=/sbin:/usr/sbin:/usr/local/sbin:/lib/initrd/bin:/bin:/usr/bin:/usr/local/bin
TERM=linux
HOME=/virt/home
PS1=[shell \W]# 
VM_PROFILE=
EOF

cp_args=
[ "$(stat -c '%D' "@LIBEXECDIR@" ./virt |sort -u |wc -l)" != 1 ] ||
	cp_args="-l"

cp -f ${verbose-} $cp_args -- "@LIBEXECDIR@/init" ./virt/init
cp -f ${verbose-} $cp_args -- "@LIBEXECDIR@/init.sh" ./virt/init.sh
