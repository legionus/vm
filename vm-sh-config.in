#!/bin/sh -efu

if [ -z "${__include_vm_sh_config-}" ]; then
__include_vm_sh_config=1

[ -z "@MKLOCAL@" ] ||
	export PATH="@PREFIX@/libshell:${PATH#@PREFIX@/libshell:}"

. shell-error
. shell-var
. shell-cmdline
. shell-git-config

no_check_kernel_config=
kernel_dir=
vm_check_kernel_config()
{
	[ -z "$no_check_kernel_config" ] && [ -n "$kernel_dir" ] && [ -s "$kernel_dir/.config" ] ||
		return 0

	local result expect

	expect=" $(
		cd '@PREFIX@'
		grep -h -v -e '^[[:space:]]*\(#.*\)\?$' $kernel_config_expect |
			sort -u |
			tr '\n' ' '
	)"
	result=" $(
		cd '@PREFIX@'
		printf '%s\n' $expect |
			fgrep -f- "$kernel_dir"/.config |
			sort -u |
			tr '\n' ' '
	)"

	if [ "$result" != "$expect" ]; then
		local n miss=
		for n in $expect; do
			[ -z "${result##* $n *}" ] ||
				miss="$miss $n"
		done
		message "Missing kernel options:
$(printf '%s\n' $miss)
"
		message "Check config files:
$(printf '@PREFIX@/%s\n' $kernel_config_expect)
"
		fatal "The kernel configuration most likely not compatible with qemu."
	fi
}

subst_globals()
{
	local __retn="$1"; shift
	local __retv="$*"; shift

	[ -n "${__retv##*@vm.arch@*}" ] || [ -z "${qemu_arch-}" ] ||
		__retv="$(printf '%s\n' "$__retv" |sed -e "s#@vm\.arch@#$qemu_arch#g")"

	[ -n "${__retv##*@vm.machine@*}" ] || [ -z "${qemu_machine-}" ] ||
		__retv="$(printf '%s\n' "$__retv" |sed -e "s#@vm\.machine@#$qemu_machine#g")"

	[ -n "${__retv##*@vm.rootfs@*}" ] || [ -z "${qemu_rootfs-}" ] ||
		__retv="$(printf '%s\n' "$__retv" |sed -e "s#@vm\.rootfs@#$qemu_rootfs#g")"

	[ -n "${__retv##*@vm.profiles@*}" ] || [ -z "${vm_profiles-}" ] ||
		__retv="$(printf '%s\n' "$__retv" |sed -e "s#@vm\.profiles@#$vm_profiles#g")"

	[ -n "${__retv##*@vm.name@*}" ] || [ -z "${vm_profile-}" ] ||
		__retv="$(printf '%s\n' "$__retv" |sed -e "s#@vm\.name@#$vm_profile#g")"

	[ -n "${__retv##*@home@*}" ] || [ -z "${HOME-}" ] ||
		__retv="$(printf '%s\n' "$__retv" |sed -e "s#@home@#$HOME#g")"

	eval "$__retn=\"\$__retv\""
}

qemu_args=0
qemu_args()
{
	while [ "$#" -gt 0 ]; do
		eval "qemu_args_$qemu_args=\"\$1\""
		qemu_args=$(($qemu_args + 1))
		shift
	done
}

_apply_cmdline_param()
{
	eval "qemu_cmdline_${1}_n=\"\$2\""
	eval "qemu_cmdline_${1}_v=\"\${3-}\""
}

qemu_cmdline=0
_append_cmdline()
{
	local n="$1" v="${2-}" f="${3-}"
	local i=0 _n _v

	[ -z "$f" ] || v=

	while [ "$i" -lt "$qemu_cmdline" ]; do
		eval "_n=\"\$qemu_cmdline_${i}_n\""
		if [ "$n" = "$_n" ]; then
			_apply_cmdline_param "$i" "$n" "$v"
			return
		fi
		i=$(($i+1))
	done
	_apply_cmdline_param "$i" "$n" "$v"
	qemu_cmdline=$(($i+1))
}

_join_cmdline()
{
	local ret="$1"
	local i=0
	set --

	while [ "$i" -lt "$qemu_cmdline" ]; do
		eval "set -- \"\$@\" \"\$qemu_cmdline_${i}_n\${qemu_cmdline_${i}_v:+=\$qemu_cmdline_${i}_v}\""
		i=$(($i+1))
	done
	eval "$ret=\"\$*\""
}

_process_qemu_arch()
{
	qemu_exec="qemu-system-$qemu_arch"
	"$qemu_exec" -version >/dev/null 2>&1 ||
		fatal "Unsupported arch: $qemu_arch"
}

_process_qemu_machine()
{
	[ -n "$qemu_machine" ] ||
		return 0
	qemu_args -machine "$qemu_machine"
}

_process_qemu_cpu()
{
	[ -n "$qemu_cpu" ] && [ "$qemu_cpu" != 'none' ] ||
		return 0
	qemu_args -cpu "$qemu_cpu"
}

_process_qemu_cpus()
{
	[ -n "$qemu_cpus" ] ||
		return 0
	[ -n "${qemu_cpus##*[!,],[!,]*}" ] && [ -n "${qemu_cpus##*[!0-9]*}" ] ||
		fatal "Wrong value: $qemu_cpus"
	qemu_args -smp "$qemu_cpus"
}

_process_qemu_memory()
{
	[ -n "$qemu_memory" ] ||
		return 0
	qemu_args -m "$qemu_memory"
}

_process_qemu_boot()
{
	[ -n "$qemu_boot" ] ||
		return 0
	[ -n "${qemu_boot##*[!,],[!,]*}" ] &&
		qemu_args -boot "order=$qemu_boot" ||
		qemu_args -boot "$qemu_boot"
}

_process_qemu_console()
{
	case "$qemu_console" in
		''|none)
			return 0
			;;
		serial)
			[ -z "$qemu_kernel" ] ||
				_append_cmdline console ttyS0
			qemu_args -serial "chardev:stdio"
			;;
		virtio)
			[ -z "$qemu_kernel" ] ||
				_append_cmdline console hvc0
			qemu_graphic=yes
			qemu_args -display "none"
			qemu_args -device "virtio-serial"
			qemu_args -device "virtconsole,chardev=stdio"
			;;
		*)
			fatal "BUG: Unknown console type: $qemu_console"
			;;
	esac

	qemu_args -chardev "stdio,mux=on,id=stdio,signal=off"
	qemu_args -mon "chardev=stdio,mode=readline"

	kernel_config_expect="$kernel_config_expect kernel.config.console.$qemu_console"
}

_process_qemu_logfile()
{
	return 0
}

_process_qemu_rootfs()
{
	return 0
}

_process_qemu_monitor()
{
	[ -n "$qemu_monitor" ] ||
		return 0

	local v="$qemu_monitor"
	subst_globals v "$v"

	case "${v%%:*}" in
		none)
			qemu_args -monitor none
			;;
		qmp)
			qemu_args -qmp "${v#qmp:}"
			;;
		monitor)
			qemu_args -monitor "${v#monitor:}"
			;;
	esac
}

_network_netdev_id=0
_object_dump_filter_id=0

_process_qemu_network()
{
	[ -n "$qemu_network" ] ||
		return 0

	local v i=0
	while [ $i -lt $qemu_network ]; do
		eval "v=\"\$qemu_network_$i\""

		local opts=

		case "$v" in
			none)
				qemu_args -net none
				;;
			user|user,*)
				# user,model=virtio-net-pci
				opts="${v#user}"
				qemu_args -nic "user${opts:+$opts}"
				;;
			dump|dump,*)
				opts="${v#dump}"

				qemu_args -netdev "user,id=netdev-${_network_netdev_id}"
				qemu_args -device "e1000,netdev=netdev-${_network_netdev_id}"
				qemu_args -object "filter-dump,id=object-filter-dump-${_object_dump_filter_id},netdev=netdev-${_network_netdev_id}${opts:+$opts}"

				_network_netdev_id=$(($_network_netdev_id + 1))
				_object_dump_filter_id=$(($_object_dump_filter_id + 1))
				;;
			netdev,*)
				qemu_args -netdev "${v#netdev,}"
				;;
			*)
				fatal "Unknown network type: $v"
				;;
		esac

		i=$(( $i + 1 ))
	done

}

_process_qemu_kernel()
{
	[ -n "$qemu_kernel" ] ||
		return 0

	case "$qemu_kernel" in
		gittree|find,*)
			if [ "$qemu_kernel" = gittree ]; then
				kernel_dir="$(git rev-parse --show-toplevel)"
			else
				kernel_dir="${qemu_kernel#find,}"
				subst_globals kernel_dir "$kernel_dir"
			fi
			qemu_kernel="$(set +f;
				find "$kernel_dir"/arch/*/boot \
					-type f -a \
						\( \
							-name bzImage -o \
							-name zImage \
						\) \
					-printf '%T@\t%p\n' |
				sort -r -k1,1 |
				head -1 |
				cut -f2-)"
			;;
	esac

	local v="$qemu_kernel"
	subst_globals v "$v"

	qemu_args -kernel "$v"
}

_process_qemu_initrd()
{
	[ -n "$qemu_initrd" ] ||
		return 0
	[ -n "$qemu_kernel" ] ||
		fatal "kernel required"
	qemu_args -initrd "$qemu_initrd"
}

_process_qemu_append()
{
	[ -n "$qemu_append" ] ||
		return 0
	[ -n "$qemu_kernel" ] ||
		fatal "kernel required"
	cmdline_foreach "$qemu_append" _append_cmdline
}

_process_qemu_addappend()
{
	[ -n "$qemu_addappend" ] ||
		return 0
	[ -n "$qemu_kernel" ] ||
		fatal "kernel required"
	cmdline_foreach "$qemu_addappend" _append_cmdline
}

_process_qemu_balloon()
{
	[ -n "$qemu_balloon" ] ||
		return 0
	if shell_var_is_yes "$qemu_balloon"; then
		qemu_args -balloon virtio
		kernel_config_expect="$kernel_config_expect kernel.config.balloon.virtio"
	fi
}

_process_qemu_kvm()
{
	[ -n "$qemu_kvm" ] ||
		return 0
	! shell_var_is_yes "$qemu_kvm" ||
		qemu_args -enable-kvm
}

_process_qemu_reboot()
{
	[ -n "$qemu_reboot" ] ||
		return 0
	! shell_var_is_no "$qemu_reboot" ||
		qemu_args -no-reboot
}

_process_qemu_graphic()
{
	[ -n "$qemu_graphic" ] ||
		return 0
	! shell_var_is_no "$qemu_graphic" ||
		qemu_args -nographic
}

_process_qemu_tempdir()
{
	[ -n "$qemu_tempdir" ] ||
		return 0
	local v="$qemu_tempdir"
	subst_globals v "$v"
	export TMPDIR="$v"
}

_process_qemu_time()
{
	[ -n "$qemu_time" ] ||
		return 0
	case "$qemu_time" in
		utc|localtime|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]*)
			qemu_time="base=$qemu_time,clock=host"
			;;
	esac
	qemu_args -rtc "$qemu_time"
}

_process_qemu_watchdog()
{
	[ -n "$qemu_watchdog" ] ||
		return 0

	local model= action=
	_parse_qemu_watchdog() {
		local a
		for a; do
			case "$a" in
				model:*)  model="${a#model:}"   ;;
				action:*) action="${a#action:}" ;;
			esac
		done
	}

	local IFS=,
	_parse_qemu_watchdog $qemu_watchdog
	subst_globals action "$action"

	qemu_args -watchdog "$model"
	qemu_args -watchdog-action "$action"
}

_process_qemu_disk()
{
	[ -n "$qemu_disk" ] ||
		return 0
	local v i=0
	while [ $i -lt $qemu_disk ]; do
		eval "v=\"\$qemu_disk_$i\""
		subst_globals v "$v"
		[ -n "${v##*[!,],[!,]*}" ] &&
			qemu_args -drive "file=$v,if=virtio,cache=writeback" ||
			qemu_args -drive "$v"
		i=$(($i + 1))
	done
}

_process_qemu_device()
{
	[ -n "$qemu_device" ] ||
		return 0
	local v i=0
	while [ $i -lt $qemu_device ]; do
		eval "v=\"\$qemu_device_$i\""
		subst_globals v "$v"
		qemu_args -device "$v"
		i=$(($i + 1))
	done
}

_process_qemu_virtfs()
{
	[ -n "$qemu_virtfs" ] ||
		return 0
	local v i=0
	while [ $i -lt $qemu_virtfs ]; do
		eval "v=\"\$qemu_virtfs_$i\""
		subst_globals v "$v"

		if [ -n "${v##*[!,],[!,]*}" ]; then
			# Broken: http://patchwork.ozlabs.org/patch/127551/
			# qemu_args -virtfs "local,id=virtfs-$i,path=${v%%:*},security_model=none,mount_tag=${v#*:}"

			qemu_args -fsdev "local,id=virtfs-$i,path=${v%%:*},security_model=none"
			qemu_args -device "virtio-9p-pci,fsdev=virtfs-$i,mount_tag=${v#*:}"
		else
			qemu_args -virtfs "$v"
		fi

		i=$(($i + 1))
	done
}

_process_qemu_random()
{
	[ -n "$qemu_random" ] ||
		return 0
	case "$qemu_random" in
		virtio,/*)
			# random=virtio,/dev/random
			qemu_args -object "rng-random,filename=${qemu_random#virtio,},id=rng0"
			qemu_args -device "virtio-rng-pci,rng=rng0"
			kernel_config_expect="$kernel_config_expect kernel.config.rnd.virtio"
			;;
		egd,*)
			# random=egd,host=10.66.4.212,port=1024
			qemu_args -chardev "socket,id=chr0,${qemu_random#egd,}"
			qemu_args -object "rng-egd,chardev=chr0,id=rng0"
			qemu_args -device "virtio-rng-pci,rng=rng0"
			kernel_config_expect="$kernel_config_expect kernel.config.rnd.virtio"
			;;
		none)
			;;
		*)
			fatal "BUG: Unknown random type: $qemu_random"
			;;
	esac
}

vm_profile="${vm_profile-}"
_get_value()
{
	local name default common_value= profile_value=
	local conf_name conf_value

	name="$1";    shift
	default="$1"; shift

	while IFS='	' read conf_name conf_value; do
		[ "$conf_name" != "vm.$vm_profile.$name" ] ||
			profile_value="$conf_value"
		[ "$conf_name" != "vm.$name" ] ||
			common_value="$conf_value"
	done < "$clist"

	value="$profile_value"
	value="${value:-$common_value}"
	value="${value:-$default}"
}

_get_param_one_bool()
{
	local retv value=
	retv="$1"; shift

	_get_value "$@"

	shell_var_is_yes "$value" || shell_var_is_no "$value" ||
		fatal "BUG: Unexpected value for '$1': $value (expected true/false variable)"

	eval "export $retv=\"$value\""
}

_get_param_one()
{
	local retv value=
	retv="$1"; shift

	_get_value "$@"

	eval "export $retv=\"$value\""
}

_get_param_list()
{
	local retv name i=0
	local conf_name conf_value

	retv="$1"; shift
	name="$1"; shift

	while IFS='	' read conf_name conf_value; do
		[ "$conf_name" = "vm.$vm_profile.$name" ] ||
			continue
		eval "export ${retv}_$i=\"$conf_value\""
		i=$(($i+1))
	done < "$clist"

	eval "export $retv=\"\$i\""
}

_parse_config()
{
	local n t f c d

	local clist="$workdir/clist"

	git_config_parse "$1" > "$clist"

	for n in $vm_params; do
		eval "[ -z \"\${$n-}\" ] || continue"
		eval "t=\"\$${n}_type\""
		eval "c=\"\${${n}_cfgname-}\""
		eval "d=\"\${${n}_default-}\""

		[ -n "$c" ] ||
			continue

		case "$t" in
			one|one_bool|list)
				;;
			*)
				fatal "Unknown value type for '$n': $t"
				;;
		esac

		"_get_param_$t" "$n" "$c" "$d"
	done
}

vm_read_config()
{
	local vm_config_file="$1"
	verbose "Read config: $vm_config_file"

	_parse_config "$vm_config_file"

	local name
	for name in $vm_params; do
		"_process_$name"
	done

	local cmdline=
	_join_cmdline cmdline

	qemu_args -pidfile "$vm_profiles/$vm_profile/pid"
	[ -z "$cmdline" ] ||
		qemu_args -append "$cmdline"
}

vm_init_config()
{
	qemu_args=0
	qemu_cmdline=0
	qemu_exec=
	kernel_config_expect='kernel.config'
}

vm_read_config=
vm_read_common_config()
{
	[ -z "$vm_read_config" ] || [ "${1-}" = "force" ] ||
		return 0

	[ -s "$vm_config_file" ] ||
		fatal "Config file not found"

	vm_init_config
	vm_read_config "$vm_config_file"

	vm_read_config=1
}

vm_profiles=
vm_read_profile_config()
{
	[ -z "$vm_read_config" ] || [ "${1-}" = "force" ] ||
		return 0

	[ -n "$vm_profile" ] ||
		fatal "Profile name be specified"

	[ -s "$vm_config_file" ] ||
		fatal "Config file not found"

	git_config_location_exists "$vm_config_file" "vm.$vm_profile" ||
		fatal "Profile not exists: vm.$vm_profile"

	vm_profiles=
	git_config_get vm_profiles "$vm_config_file" "vm.profiles"

	vm_init_config
	vm_read_config "$vm_config_file"

	vm_read_config=1
}

fi
