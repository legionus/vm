#!/bin/sh -efu

. shell-args
. shell-getopt

show_help() {
	local n d i m x s
	set +f --

	for cmd in "@PREFIX@/vm-command-"*; do
		[ -x "$cmd" ] ||
			break

		[ -n "${cmd##*.in}" ] ||
			continue

		set -- "$@" "$cmd"
	done

	printf 'Usage: %s [options] <command> [<profile>] [command-options]\n' "$PROG"

	for cmd; do
		VM_USAGE=1 "$cmd" |
		while read -r m; do
			printf '   or: %s %s\n' "$PROG" "$m"
		done
	done

	cat <<-EOF

	The program to run virtual machines and run programs in their
	virtual environment.

	Commands:

	EOF

	for cmd; do
		n="${cmd##*/vm-command-}"
		m="$(VM_HELP=1 "$cmd")"

		printf ' %10s - %s;\n' "$n" "$m"
	done

	for cmd; do
		n="${cmd##*/vm-command-}"
		m="$(VM_HELP_OPTIONS=1 "$cmd")"

		[ -n "${m:+1}" ] ||
			continue

		printf '\n'
		printf 'Command options (%s):\n%s\n' "$n" "$m"
	done

	printf '\n'
	printf 'Options:\n'

	s='               '
	printf '%s\n' $vm_params |
		sort |
	while read n; do
		eval "m=\"\$${n}_description\""
		eval "c=\"\${${n}_cmdline-}\""
		eval "d=\"\${${n}_default-}\""

		[ -n "$c" ] ||
			continue

		i="${#c}"
		x="$s"
		while [ $i -gt 0 ]; do
			x="${x#?}"
			i=$(($i-1))
		done

		printf '  --%s%s%s.\n' "$c" "$x" "$m"
		[ -z "$d" ] ||
		printf '    %s%s;\n' "$s" "(default: '$d')"
		printf '\n'
	done
	cat <<EOF
  --dry-run        Show final qemu command;
  -v, --verbose    Print a message for each action;
  -V, --version    Print program version and exit;
  -h, --help       Show this text and exit.

Report bugs to author.

EOF
	exit
}

print_version() {
	cat <<-EOF
	$PROG version @VERSION@
	Written by Alexey Gladkov <gladkov.alexey@gmail.com>

	Copyright (C) 2015  Alexey Gladkov <gladkov.alexey@gmail.com>
	This is free software; see the source for copying conditions.  There is NO
	warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
	EOF
	exit
}

getopt_args=
generate_getopt_args() {
	local n c
	for n in $vm_params; do
		eval "c=\"\${${n}_cmdline-}\""
		[ -z "$c" ] ||
			getopt_args="$getopt_args$c:,"
	done
}

vm_params=' '
parameter() {
	local vartype varname cfgname cmdline default description

	varname="$1"; shift
	vartype="$1"; shift
	cfgname="$1"; shift
	cmdline="$1"; shift
	default="$1"; shift
	description="$1"; shift

	vm_params="$vm_params$varname "

	[ -z "$cmdline" ] ||
		eval "export ${varname}_cmdline=\"\$cmdline\""

	[ -z "$cfgname" ] ||
		eval "export ${varname}_cfgname=\"\$cfgname\""

	eval "export ${varname}_default=\"$default\""
	eval "export ${varname}_type=\"\$vartype\""
	eval "export ${varname}_description=\"\$description\""
}

set_cmdline_variable() {
	local c n
	for n in $vm_params; do
		eval "c=\"\${${n}_cmdline-}\""
		if [ "$c" = "$1" ]; then
			eval "export ${n}=\"\$2\""
			break
		fi
	done
}

. "@PREFIX@/vm-options"


GETOPT_ALLOW_UNKNOWN=1
TEMP=`generate_getopt_args; getopt -n $PROG -o 'h,v,V' -l "${getopt_args}dry-run,help,verbose,version" -- "$@"` ||
	show_usage
eval set -- "$TEMP"

vm_dryrun=
while :; do
	case "$1" in
		--dry-run)
			vm_dryrun=echo
			;;
		-v|--verbose) verbose=-v
			;;
		-h|--help) show_help
			;;
		-V|--version) print_version
			;;
		--[a-z]*)
			set_cmdline_variable "${1#--}" "$2"
			shift
			;;
		--) shift; break
			;;
	esac
	shift
done

[ "$#" -ge 1 ] ||
	show_usage "More arguments required."

command="$1"; shift

vm_profile=
if [ "$#" -gt 0 ]; then
	vm_profile="$1"; shift
fi

[ -x "@PREFIX@/vm-command-$command" ] ||
	show_usage "Command unknown: $command"

vm_config_file="${VM_CONFIG:-$HOME/.vmconfig}"
verbose "Config file: $vm_config_file"

cwddir="$(readlink -ev .)"

export vm_params vm_dryrun vm_profile
export vm_config_file
export verbose cwddir

. "@PREFIX@/vm-command-$command"
